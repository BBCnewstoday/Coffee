
#include "basics.h"

typedef struct 
{
  uint32 id;
  uint16 tile_x;
  uint16 tile_y;
  CArgb c;
  C3Vector position;
  float g;
  float h;
  float i;
} mplt_entry <read=showMPLT, size=36, optimize=false>;

string showMPLT(mplt_entry& rec)
{
  string a;
  return a;
}

typedef struct 
{
  uint32 id;
  uint16 tile_x;
  uint16 tile_y;
  CArgb c;
  C3Vector position;
  float g;
  float h;
  float i;
uint32_t unk0;
uint32_t unk1;
uint32_t unk2;
uint32_t unk3;
uint32_t unk4;
uint32_t unk5;
uint32_t unk6;
} mpl2_entry <read=showMPL2, optimize=false>;

string showMPL2(mpl2_entry& rec)
{
  string a;
  return a;
}

typedef struct 
{
  uint32 id;
  CArgb c;
  C3Vector position;
  float g;
  float h;
  float i;
uint32_t unk0;
uint32_t unk1;
uint32_t unk2;
uint16_t tile_x;
uint16_t tile_y;
uint32_t unk3;
} mpl2_914_entry <size=0x34, optimize=false>;

void chunk_contents (CHUNK_header& header)
{
  if (header.magic._._ == 1297499474) // MVER
  {
    _count = 1;
    unsigned int version;
  }
  else if (header.magic._._ == 1297108052) // MPLT
  {
    mplt_entry _ [header.size/sizeof (mplt_entry)];
  }
  else if (header.magic._._ == 1297108018) // MPL2
  {
    mpl2_entry _ [header.size/sizeof (mpl2_entry)];
  }
  else
  {
    char _[header.size];
    _known = false;
  }
}

all_chunks_via_chunk_contents();