#include "basics.h"
//some enums for purposes ^^
typedef enum <uint32> { 
    GF_NORMAL = 0, 
    GF_TILTINGX  = 1,
    GF_TILTINGY__ = 2,
    GF_TILTINGXY = 3,
	GF_ADDITIONAL_HEADER_FIELD = 8,
	GF_UNKNONWN = 16
} E_GLOBALFLAGS;

typedef enum <uint16>{
	IT_None =0,
	IT_Linear =1,
	IT_Hermite =2,
	IT_Bezier =3
}InterpolationType;

typedef enum <uint32> { 
    AL_Looped = 0, 
    AL_NotLooped = 1
} E_ANIMATIONLOOP;

typedef enum <int32> { 
//  CT_Unk = -1, 
	CT_Potrait = 0,
    CT_CharInfo = 1
} E_CAMERATYPE;

typedef enum <int32>  { 
    BF_None = 0, 
    BF_Billboard = 8, 
    BF_Transformed = 512, 
    BF_BillboardAndTransformed = 520
} E_BONESFLAGS;

typedef enum <uchar>  {
    TU_Animated = 0, 
    TU_Static = 16
} E_VIEW_TEXUNITFLAGS;

typedef enum <uchar>{
	HT_HEAD =0,
	HT_TAIL =1,
	HT_BOTH =2
} E_HEAD_OR_TAIL;

typedef enum <ushort>  { 
    RF_None = 0, 
    RF_Unlit = 1, 
    RF_Unfogged = 2,
	RF_Unlit_Unfogged = 3,
    RF_TwoSided = 4, 
	RF_Unlit_Two_Sided = 5,
	RF_Unfogged_TwoSided = 6,
	RF_Unlit_Unfogged_TwoSided = 7,
	RF_Billboard =8,
	RF_Unlit_Billboard =9,
	RF_Unfogged_Billboard =10,
	RF_Unlit_Unfogged_Billboard =11,
	RF_Billboard_TwoSided =12,
	RF_Unlit_Billboard_TwoSided =13,
	RF_Unfogged_Billboard_TwoSided =14,
	RF_Unlit_Unfogged_Billboard_TwoSided =15,
    RF_Not_ZBuffered = 16,
	RF_Not_ZBuffered_Unlit =17,
	RF_Not_ZBuffered_Unfogged  =18,
	RF_Not_ZBuffered_Unlit_Unfogged =19,
	RF_Not_ZBuffered_TwoSided =20,
	RF_Not_ZBuffered_Unlit_Two_Sided =21,
	RF_Not_ZBuffered_Unfogged_TwoSided =22,
	RF_Not_ZBuffered_Unlit_Unfogged_TwoSided =23,
	RF_Not_ZBuffered_Billboard =24,
	RF_Not_ZBuffered_Unlit_Billboard =25,
	RF_Not_ZBuffered_Unfogged_Billboard =26,
	RF_Not_ZBuffered_Unlit_Unfogged_Billboard =27,
	RF_Not_ZBuffered_Billboard_TwoSided =28,
	RF_Not_ZBuffered_Unlit_Billboard_TwoSided =29,
	RF_Not_ZBuffered_Unfogged_Billboard_TwoSided =30,
	RF_Not_ZBuffered_Unlit_Unfogged_Billboard_TwoSided =31
} E_RENDERFLAGS;

typedef enum <ushort>  { 
    RM_Opaque = 0, 
    RM_AlphaTesting, 
    RM_AlphaBlending, 
    RM_Additive , 
    RM_AdditiveAlpha, 
    RM_Modulate, 
    RM_DeeprumTram 
} E_RENDERMODES;

typedef enum <uint32> { 
    TT_Hardcoded = 0, 
    TT_Skin = 1, 
    TT_ObjectSkin = 2, 
TT_WeaponBlade = 3,
TT_WeaponHandle = 4,
TT_Obsolete_Environment = 5,
TT_CharacterHair = 6,
TT_Obsolete_CharFacialHair = 7,
    TT_SkinExtra = 8, 
    TT_UISkin = 9, 
    TT_Obsolete_TaurenMane = 10, 
    TT_CreatureSkin1 = 11, 
    TT_CreatureSkin2 = 12, 
    TT_CreatureSkin3 = 13 ,
TT_ItemIcon,
TT_Guild_background,
TT_Guild_emblem_color,
TT_Guild_emblem_border,
TT_Guild_m
} E_TEXTURETYPES;

typedef enum <uint32> { 
    TF_None = 0, 
    TF_WrapX, 
    TF_WrapY
} E_TEXTUREFLAGS;

typedef enum <uint16> {

Stand = 0,
Death = 1,
Spell = 2,
Stop = 3,
Walk = 4,
Run = 5,
Dead = 6,
Rise = 7,
StandWound = 8,
CombatWound = 9,
CombatCritical = 10,
ShuffleLeft = 11,
ShuffleRight = 12,
Walkbackwards = 13,
Stun = 14,
HandsClosed = 15,
AttackUnarmed = 16,
Attack1H = 17,
Attack2H = 18,
Attack2HL = 19,
ParryUnarmed = 20,
Parry1H = 21,
Parry2H = 22,
Parry2HL = 23,
ShieldBlock = 24,
ReadyUnarmed = 25,
Ready1H = 26,
Ready2H = 27,
Ready2HL = 28,
ReadyBow = 29,
Dodge = 30,
SpellPrecast = 31,
SpellCast = 32,
SpellCastArea = 33,
NPCWelcome = 34,
NPCGoodbye = 35,
Block = 36,
JumpStart = 37,
Jump = 38,
JumpEnd = 39,
Fall = 40,
SwimIdle = 41,
Swim = 42,
SwimLeft = 43,
SwimRight = 44,
SwimBackwards = 45,
AttackBow = 46,
FireBow = 47,
ReadyRifle = 48,
AttackRifle = 49,
Loot = 50,
ReadySpellDirected = 51,
ReadySpellOmni = 52,
SpellCastDirected = 53,
SpellCastOmni = 54,
BattleRoar = 55,
ReadyAbility = 56,
Special1H = 57,
Special2H = 58,
ShieldBash = 59,
EmoteTalk = 60,
EmoteEat = 61,
EmoteWork = 62,
EmoteUseStanding = 63,
EmoteTalkExclamation = 64,
EmoteTalkQuestion = 65,
EmoteBow = 66,
EmoteWave = 67,
EmoteCheer = 68,
EmoteDance = 69,
EmoteLaugh = 70,
EmoteSleep = 71,
EmoteSitGround = 72,
EmoteRude = 73,
EmoteRoar = 74,
EmoteKneel = 75,
EmoteKiss = 76,
EmoteCry = 77,
EmoteChicken = 78,
EmoteBeg = 79,
EmoteApplaud = 80,
EmoteShout = 81,
EmoteFlex = 82,
EmoteShy = 83,
EmotePoint = 84,
Attack1HPierce = 85,
Attack2HLoosePierce = 86,
AttackOff = 87,
AttackOffPierce = 88,
Sheath = 89,
HipSheath = 90,
Mount = 91,
RunRight = 92,
RunLeft = 93,
MountSpecial = 94,
Kick = 95,
SitGroundDown = 96,
SitGround = 97,
SitGroundUp = 98,
SleepDown = 99,
Sleep = 100,
SleepUp = 101,
SitChairLow = 102,
SitChairMed = 103,
SitChairHigh = 104,
LoadBow = 105,
LoadRifle = 106,
AttackThrown = 107,
ReadyThrown = 108,
HoldBow = 109,
HoldRifle = 110,
HoldThrown = 111,
LoadThrown = 112,
EmoteSalute = 113,
KneelStart = 114,
KneelLoop = 115,
KneelEnd = 116,
AttackUnarmedOff = 117,
SpecialUnarmed = 118,
StealthWalk = 119,
StealthStand = 120,
Knockdown = 121,
EatingLoop = 122,
UseStandingLoop = 123,
ChannelCastDirected = 124,
ChannelCastOmni = 125,
Whirlwind = 126,
Birth = 127,
UseStandingStart = 128,
UseStandingEnd = 129,
CreatureSpecial = 130,
Drown = 131,
Drowned = 132,
FishingCast = 133,
FishingLoop = 134,
Fly = 135,
EmoteWorkNoSheathe = 136,
EmoteStunNoSheathe = 137,
EmoteUseStandingNoSheathe = 138,
SpellSleepDown = 139,
SpellKneelStart = 140,
SpellKneelLoop = 141,
SpellKneelEnd = 142,
Sprint = 143,
InFlight = 144,
Spawn = 145,
Close = 146,
Closed = 147,
Open = 148,
Opened = 149,
Destroy = 150,
Destroyed = 151,
Rebuild = 152,
Custom0 = 153,
Custom1 = 154,
Custom2 = 155,
Custom3 = 156,
Despawn = 157,
Hold = 158,
Decay = 159,
BowPull = 160,
BowRelease = 161,
ShipStart = 162,
ShipMoving = 163,
ShipStop = 164,
GroupArrow = 165,
Arrow = 166,
CorpseArrow = 167,
GuideArrow = 168,
Sway = 169,
DruidCatPounce = 170,
DruidCatRip = 171,
DruidCatRake = 172,
DruidCatRavage = 173,
DruidCatClaw = 174,
DruidCatCower = 175,
DruidBearSwipe = 176,
DruidBearBite = 177,
DruidBearMaul = 178,
DruidBearBash = 179,
DragonTail = 180,
DragonStomp = 181,
DragonSpit = 182,
DragonSpitHover = 183,
DragonSpitFly = 184,
EmoteYes = 185,
EmoteNo = 186,
JumpLandRun = 187,
LootHold = 188,
LootUp = 189,
StandHigh = 190,
Impact = 191,
LiftOff = 192,
Hover = 193,
SuccubusEntice = 194,
EmoteTrain = 195,
EmoteDead = 196,
EmoteDanceOnce = 197,
Deflect = 198,
EmoteEatNoSheathe = 199,
Land = 200,
Submerge = 201,
Submerged = 202,
Cannibalize = 203,
ArrowBirth = 204,
GroupArrowBirth = 205,
CorpseArrowBirth = 206,
GuideArrowBirth = 207,
EmoteTalkNoSheathe = 208,
EmotePointNoSheathe = 209,
EmoteSaluteNoSheathe = 210,
EmoteDanceSpecial = 211,
Mutilate = 212,
CustomSpell01 = 213,
CustomSpell02 = 214,
CustomSpell03 = 215,
CustomSpell04 = 216,
CustomSpell05 = 217,
CustomSpell06 = 218,
CustomSpell07 = 219,
CustomSpell08 = 220,
CustomSpell09 = 221,
CustomSpell10 = 222,
StealthRun = 223,
Emerge = 224,
Cower = 225,
Grab = 226,
GrabClosed = 227,
GrabThrown = 228,
FlyStand = 229,
FlyDeath = 230,
FlySpell = 231,
FlyStop = 232,
FlyWalk = 233,
FlyRun = 234,
FlyDead = 235,
FlyRise = 236,
FlyStandWound = 237,
FlyCombatWound = 238,
FlyCombatCritical = 239,
FlyShuffleLeft = 240,
FlyShuffleRight = 241,
FlyWalkbackwards = 242,
FlyStun = 243,
FlyHandsClosed = 244,
FlyAttackUnarmed = 245,
FlyAttack1H = 246,
FlyAttack2H = 247,
FlyAttack2HL = 248,
FlyParryUnarmed = 249,
FlyParry1H = 250,
FlyParry2H = 251,
FlyParry2HL = 252,
FlyShieldBlock = 253,
FlyReadyUnarmed = 254,
FlyReady1H = 255,
FlyReady2H = 256,
FlyReady2HL = 257,
FlyReadyBow = 258,
FlyDodge = 259,
FlySpellPrecast = 260,
FlySpellCast = 261,
FlySpellCastArea = 262,
FlyNPCWelcome = 263,
FlyNPCGoodbye = 264,
FlyBlock = 265,
FlyJumpStart = 266,
FlyJump = 267,
FlyJumpEnd = 268,
FlyFall = 269,
FlySwimIdle = 270,
FlySwim = 271,
FlySwimLeft = 272,
FlySwimRight = 273,
FlySwimBackwards = 274,
FlyAttackBow = 275,
FlyFireBow = 276,
FlyReadyRifle = 277,
FlyAttackRifle = 278,
FlyLoot = 279,
FlyReadySpellDirected = 280,
FlyReadySpellOmni = 281,
FlySpellCastDirected = 282,
FlySpellCastOmni = 283,
FlyBattleRoar = 284,
FlyReadyAbility = 285,
FlySpecial1H = 286,
FlySpecial2H = 287,
FlyShieldBash = 288,
FlyEmoteTalk = 289,
FlyEmoteEat = 290,
FlyEmoteWork = 291,
FlyEmoteUseStanding = 292,
FlyEmoteTalkExclamation = 293,
FlyEmoteTalkQuestion = 294,
FlyEmoteBow = 295,
FlyEmoteWave = 296,
FlyEmoteCheer = 297,
FlyEmoteDance = 298,
FlyEmoteLaugh = 299,
FlyEmoteSleep = 300,
FlyEmoteSitGround = 301,
FlyEmoteRude = 302,
FlyEmoteRoar = 303,
FlyEmoteKneel = 304,
FlyEmoteKiss = 305,
FlyEmoteCry = 306,
FlyEmoteChicken = 307,
FlyEmoteBeg = 308,
FlyEmoteApplaud = 309,
FlyEmoteShout = 310,
FlyEmoteFlex = 311,
FlyEmoteShy = 312,
FlyEmotePoint = 313,
FlyAttack1HPierce = 314,
FlyAttack2HLoosePierce = 315,
FlyAttackOff = 316,
FlyAttackOffPierce = 317,
FlySheath = 318,
FlyHipSheath = 319,
FlyMount = 320,
FlyRunRight = 321,
FlyRunLeft = 322,
FlyMountSpecial = 323,
FlyKick = 324,
FlySitGroundDown = 325,
FlySitGround = 326,
FlySitGroundUp = 327,
FlySleepDown = 328,
FlySleep = 329,
FlySleepUp = 330,
FlySitChairLow = 331,
FlySitChairMed = 332,
FlySitChairHigh = 333,
FlyLoadBow = 334,
FlyLoadRifle = 335,
FlyAttackThrown = 336,
FlyReadyThrown = 337,
FlyHoldBow = 338,
FlyHoldRifle = 339,
FlyHoldThrown = 340,
FlyLoadThrown = 341,
FlyEmoteSalute = 342,
FlyKneelStart = 343,
FlyKneelLoop = 344,
FlyKneelEnd = 345,
FlyAttackUnarmedOff = 346,
FlySpecialUnarmed = 347,
FlyStealthWalk = 348,
FlyStealthStand = 349,
FlyKnockdown = 350,
FlyEatingLoop = 351,
FlyUseStandingLoop = 352,
FlyChannelCastDirected = 353,
FlyChannelCastOmni = 354,
FlyWhirlwind = 355,
FlyBirth = 356,
FlyUseStandingStart = 357,
FlyUseStandingEnd = 358,
FlyCreatureSpecial = 359,
FlyDrown = 360,
FlyDrowned = 361,
FlyFishingCast = 362,
FlyFishingLoop = 363,
FlyFly = 364,
FlyEmoteWorkNoSheathe = 365,
FlyEmoteStunNoSheathe = 366,
FlyEmoteUseStandingNoSheathe = 367,
FlySpellSleepDown = 368,
FlySpellKneelStart = 369,
FlySpellKneelLoop = 370,
FlySpellKneelEnd = 371,
FlySprint = 372,
FlyInFlight = 373,
FlySpawn = 374,
FlyClose = 375,
FlyClosed = 376,
FlyOpen = 377,
FlyOpened = 378,
FlyDestroy = 379,
FlyDestroyed = 380,
FlyRebuild = 381,
FlyCustom0 = 382,
FlyCustom1 = 383,
FlyCustom2 = 384,
FlyCustom3 = 385,
FlyDespawn = 386,
FlyHold = 387,
FlyDecay = 388,
FlyBowPull = 389,
FlyBowRelease = 390,
FlyShipStart = 391,
FlyShipMoving = 392,
FlyShipStop = 393,
FlyGroupArrow = 394,
FlyArrow = 395,
FlyCorpseArrow = 396,
FlyGuideArrow = 397,
FlySway = 398,
FlyDruidCatPounce = 399,
FlyDruidCatRip = 400,
FlyDruidCatRake = 401,
FlyDruidCatRavage = 402,
FlyDruidCatClaw = 403,
FlyDruidCatCower = 404,
FlyDruidBearSwipe = 405,
FlyDruidBearBite = 406,
FlyDruidBearMaul = 407,
FlyDruidBearBash = 408,
FlyDragonTail = 409,
FlyDragonStomp = 410,
FlyDragonSpit = 411,
FlyDragonSpitHover = 412,
FlyDragonSpitFly = 413,
FlyEmoteYes = 414,
FlyEmoteNo = 415,
FlyJumpLandRun = 416,
FlyLootHold = 417,
FlyLootUp = 418,
FlyStandHigh = 419,
FlyImpact = 420,
FlyLiftOff = 421,
FlyHover = 422,
FlySuccubusEntice = 423,
FlyEmoteTrain = 424,
FlyEmoteDead = 425,
FlyEmoteDanceOnce = 426,
FlyDeflect = 427,
FlyEmoteEatNoSheathe = 428,
FlyLand = 429,
FlySubmerge = 430,
FlySubmerged = 431,
FlyCannibalize = 432,
FlyArrowBirth = 433,
FlyGroupArrowBirth = 434,
FlyCorpseArrowBirth = 435,
FlyGuideArrowBirth = 436,
FlyEmoteTalkNoSheathe = 437,
FlyEmotePointNoSheathe = 438,
FlyEmoteSaluteNoSheathe = 439,
FlyEmoteDanceSpecial = 440,
FlyMutilate = 441,
FlyCustomSpell01 = 442,
FlyCustomSpell02 = 443,
FlyCustomSpell03 = 444,
FlyCustomSpell04 = 445,
FlyCustomSpell05 = 446,
FlyCustomSpell06 = 447,
FlyCustomSpell07 = 448,
FlyCustomSpell08 = 449,
FlyCustomSpell09 = 450,
FlyCustomSpell10 = 451,
FlyStealthRun = 452,
FlyEmerge = 453,
FlyCower = 454,
FlyGrab = 455,
FlyGrabClosed = 456,
FlyGrabThrown = 457,
ToFly = 458,
ToHover = 459,
ToGround = 460,
FlyToFly = 461,
FlyToHover = 462,
FlyToGround = 463,
Settle = 464,
FlySettle = 465,
DeathStart = 466,
DeathLoop = 467,
DeathEnd = 468,
FlyDeathStart = 469,
FlyDeathLoop = 470,
FlyDeathEnd = 471,
DeathEndHold = 472,
FlyDeathEndHold = 473,
Strangulate = 474,
FlyStrangulate = 475,
ReadyJoust = 476,
LoadJoust = 477,
HoldJoust = 478,
FlyReadyJoust = 479,
FlyLoadJoust = 480,
FlyHoldJoust = 481,
AttackJoust = 482,
FlyAttackJoust = 483,
ReclinedMount = 484,
FlyReclinedMount = 485,
ToAltered = 486,
FromAltered = 487,
FlyToAltered = 488,
FlyFromAltered = 489,
InStocks = 490,
FlyInStocks = 491,
VehicleGrab = 492,
VehicleThrow = 493,
FlyVehicleGrab = 494,
FlyVehicleThrow = 495,
ToAlteredPostSwap = 496,
FromAlteredPostSwap = 497,
FlyToAlteredPostSwap = 498,
FlyFromAlteredPostSwap = 499,
ReclinedMountPassenger = 500,
FlyReclinedMountPassenger = 501,
Carry2H = 502,
Carried2H = 503,
FlyCarry2H = 504,
FlyCarried2H = 505,
EmoteSniff = 506,
EmoteFlySniff = 507,
AttackFist1H = 508,
FlyAttackFist1H = 509,
AttackFist1HOff = 510,
FlyAttackFist1HOff = 511,
ParryFist1H = 512,
FlyParryFist1H = 513,
ReadyFist1H = 514,
FlyReadyFist1H = 515,
SpecialFist1H = 516,
FlySpecialFist1H = 517,
EmoteReadStart = 518,
FlyEmoteReadStart = 519,
EmoteReadLoop = 520,
FlyEmoteReadLoop = 521,
EmoteReadEnd = 522,
FlyEmoteReadEnd = 523,
SwimRun = 524,
FlySwimRun = 525,
SwimWalk = 526,
FlySwimWalk = 527,
SwimWalkBackwards = 528,
FlySwimWalkBackwards = 529,
SwimSprint = 530,
FlySwimSprint = 531,
MountSwimIdle = 532,
FlyMountSwimIdle = 533,
MountSwimBackwards = 534,
FlyMountSwimBackwards = 535,
MountSwimLeft = 536,
FlyMountSwimLeft = 537,
MountSwimRight = 538,
FlyMountSwimRight = 539,
MountSwimRun = 540,
FlyMountSwimRun = 541,
MountSwimSprint = 542,
FlyMountSwimSprint = 543,
MountSwimWalk = 544,
FlyMountSwimWalk = 545,
MountSwimWalkBackwards = 546,
FlyMountSwimWalkBackwards = 547,
MountFlightIdle = 548,
FlyMountFlightIdle = 549,
MountFlightBackwards = 550,
FlyMountFlightBackwards = 551,
MountFlightLeft = 552,
FlyMountFlightLeft = 553,
MountFlightRight = 554,
FlyMountFlightRight = 555,
MountFlightRun = 556,
FlyMountFlightRun = 557,
MountFlightSprint = 558,
FlyMountFlightSprint = 559,
MountFlightWalk = 560,
FlyMountFlightWalk = 561,
MountFlightWalkBackwards = 562,
FlyMountFlightWalkBackwards = 563,
MountFlightStart = 564,
FlyMountFlightStart = 565,
MountSwimStart = 566,
FlyMountSwimStart = 567,
MountSwimLand = 568,
FlyMountSwimLand = 569,
MountSwimLandRun = 570,
FlyMountSwimLandRun = 571,
MountFlightLand = 572,
FlyMountFlightLand = 573,
MountFlightLandRun = 574,
FlyMountFlightLandRun = 575,
ReadyBlowDart = 576,
FlyReadyBlowDart = 577,
LoadBlowDart = 578,
FlyLoadBlowDart = 579,
HoldBlowDart = 580,
FlyHoldBlowDart = 581,
AttackBlowDart = 582,
FlyAttackBlowDart = 583,
CarriageMount = 584,
FlyCarriageMount = 585,
CarriagePassengerMount = 586,
FlyCarriagePassengerMount = 587,
CarriageMountAttack = 588,
FlyCarriageMountAttack = 589,
BarTendStand = 590,
FlyBarTendStand = 591,
BarServerWalk = 592,
FlyBarServerWalk = 593,
BarServerRun = 594,
FlyBarServerRun = 595,
BarServerShuffleLeft = 596,
FlyBarServerShuffleLeft = 597,
BarServerShuffleRight = 598,
FlyBarServerShuffleRight = 599,
BarTendEmoteTalk = 600,
FlyBarTendEmoteTalk = 601,
BarTendEmotePoint = 602,
FlyBarTendEmotePoint = 603,
BarServerStand = 604,
FlyBarServerStand = 605,
BarSweepWalk = 606,
FlyBarSweepWalk = 607,
BarSweepRun = 608,
FlyBarSweepRun = 609,
BarSweepShuffleLeft = 610,
FlyBarSweepShuffleLeft = 611,
BarSweepShuffleRight = 612,
FlyBarSweepShuffleRight = 613,
BarSweepEmoteTalk = 614,
FlyBarSweepEmoteTalk = 615,
BarPatronSitEmotePoint = 616,
FlyBarPatronSitEmotePoint = 617,
MountSelfIdle = 618,
FlyMountSelfIdle = 619,
MountSelfWalk = 620,
FlyMountSelfWalk = 621,
MountSelfRun = 622,
FlyMountSelfRun = 623,
MountSelfSprint = 624,
FlyMountSelfSprint = 625,
MountSelfRunLeft = 626,
FlyMountSelfRunLeft = 627,
MountSelfRunRight = 628,
FlyMountSelfRunRight = 629,
MountSelfShuffleLeft = 630,
FlyMountSelfShuffleLeft = 631,
MountSelfShuffleRight = 632,
FlyMountSelfShuffleRight = 633,
MountSelfWalkBackwards = 634,
FlyMountSelfWalkBackwards = 635,
MountSelfSpecial = 636,
FlyMountSelfSpecial = 637,
MountSelfJump = 638,
FlyMountSelfJump = 639,
MountSelfJumpStart = 640,
FlyMountSelfJumpStart = 641,
MountSelfJumpEnd = 642,
FlyMountSelfJumpEnd = 643,
MountSelfJumpLandRun = 644,
FlyMountSelfJumpLandRun = 645,
MountSelfStart = 646,
FlyMountSelfStart = 647,
MountSelfFall = 648,
FlyMountSelfFall = 649,
Stormstrike = 650,
FlyStormstrike = 651,
ReadyJoustNoSheathe = 652,
FlyReadyJoustNoSheathe = 653,
Slam = 654,
FlySlam = 655,
DeathStrike = 656,
FlyDeathStrike = 657,
SwimAttackUnarmed = 658,
FlySwimAttackUnarmed = 659,
SpinningKick = 660,
FlySpinningKick = 661,
RoundHouseKick = 662,
FlyRoundHouseKick = 663,
RollStart = 664,
FlyRollStart = 665,
Roll = 666,
FlyRoll = 667,
RollEnd = 668,
FlyRollEnd = 669,
PalmStrike = 670,
FlyPalmStrike = 671,
MonkOffenseAttackUnarmed = 672,
FlyMonkOffenseAttackUnarmed = 673,
MonkOffenseAttackUnarmedOff = 674,
FlyMonkOffenseAttackUnarmedOff = 675,
MonkOffenseParryUnarmed = 676,
FlyMonkOffenseParryUnarmed = 677,
MonkOffenseReadyUnarmed = 678,
FlyMonkOffenseReadyUnarmed = 679,
MonkOffenseSpecialUnarmed = 680,
FlyMonkOffenseSpecialUnarmed = 681,
MonkDefenseAttackUnarmed = 682,
FlyMonkDefenseAttackUnarmed = 683,
MonkDefenseAttackUnarmedOff = 684,
FlyMonkDefenseAttackUnarmedOff = 685,
MonkDefenseParryUnarmed = 686,
FlyMonkDefenseParryUnarmed = 687,
MonkDefenseReadyUnarmed = 688,
FlyMonkDefenseReadyUnarmed = 689,
MonkDefenseSpecialUnarmed = 690,
FlyMonkDefenseSpecialUnarmed = 691,
MonkHealAttackUnarmed = 692,
FlyMonkHealAttackUnarmed = 693,
MonkHealAttackUnarmedOff = 694,
FlyMonkHealAttackUnarmedOff = 695,
MonkHealParryUnarmed = 696,
FlyMonkHealParryUnarmed = 697,
MonkHealReadyUnarmed = 698,
FlyMonkHealReadyUnarmed = 699,
MonkHealSpecialUnarmed = 700,
FlyMonkHealSpecialUnarmed = 701,
FlyingKick = 702,
FlyFlyingKick = 703,
FlyingKickStart = 704,
FlyFlyingKickStart = 705,
FlyingKickEnd = 706,
FlyFlyingKickEnd = 707,
CraneStart = 708,
FlyCraneStart = 709,
CraneLoop = 710,
FlyCraneLoop = 711,
CraneEnd = 712,
FlyCraneEnd = 713,
Despawned = 714,
FlyDespawned = 715,
ThousandFists = 716,
FlyThousandFists = 717,
MonkHealReadySpellDirected = 718,
FlyMonkHealReadySpellDirected = 719,
MonkHealReadySpellOmni = 720,
FlyMonkHealReadySpellOmni = 721,
MonkHealSpellCastDirected = 722,
FlyMonkHealSpellCastDirected = 723,
MonkHealSpellCastOmni = 724,
FlyMonkHealSpellCastOmni = 725,
MonkHealChannelCastDirected = 726,
FlyMonkHealChannelCastDirected = 727,
MonkHealChannelCastOmni = 728,
FlyMonkHealChannelCastOmni = 729,
Torpedo = 730,
FlyTorpedo = 731,
Meditate = 732,
FlyMeditate = 733,
BreathOfFire = 734,
FlyBreathOfFire = 735,
RisingSunKick = 736,
FlyRisingSunKick = 737,
GroundKick = 738,
FlyGroundKick = 739,
KickBack = 740,
FlyKickBack = 741,
PetBattleStand = 742,
FlyPetBattleStand = 743,
PetBattleDeath = 744,
FlyPetBattleDeath = 745,
PetBattleRun = 746,
FlyPetBattleRun = 747,
PetBattleWound = 748,
FlyPetBattleWound = 749,
PetBattleAttack = 750,
FlyPetBattleAttack = 751,
PetBattleReadySpell = 752,
FlyPetBattleReadySpell = 753,
PetBattleSpellCast = 754,
FlyPetBattleSpellCast = 755,
PetBattleCustom0 = 756,
FlyPetBattleCustom0 = 757,
PetBattleCustom1 = 758,
FlyPetBattleCustom1 = 759,
PetBattleCustom2 = 760,
FlyPetBattleCustom2 = 761,
PetBattleCustom3 = 762,
FlyPetBattleCustom3 = 763,
PetBattleVictory = 764,
FlyPetBattleVictory = 765,
PetBattleLoss = 766,
FlyPetBattleLoss = 767,
PetBattleStun = 768,
FlyPetBattleStun = 769,
PetBattleDead = 770,
FlyPetBattleDead = 771,
PetBattleFreeze = 772,
FlyPetBattleFreeze = 773,
MonkOffenseAttackWeapon = 774,
FlyMonkOffenseAttackWeapon = 775,
BarTendEmoteWave = 776,
FlyBarTendEmoteWave = 777,
BarServerEmoteTalk = 778,
FlyBarServerEmoteTalk = 779,
BarServerEmoteWave = 780,
FlyBarServerEmoteWave = 781,
BarServerPourDrinks = 782,
FlyBarServerPourDrinks = 783,
BarServerPickup = 784,
FlyBarServerPickup = 785,
BarServerPutDown = 786,
FlyBarServerPutDown = 787,
BarSweepStand = 788,
FlyBarSweepStand = 789,
BarPatronSit = 790,
FlyBarPatronSit = 791,
BarPatronSitEmoteTalk = 792,
FlyBarPatronSitEmoteTalk = 793,
BarPatronStand = 794,
FlyBarPatronStand = 795,
BarPatronStandEmoteTalk = 796,
FlyBarPatronStandEmoteTalk = 797,
BarPatronStandEmotePoint = 798,
FlyBarPatronStandEmotePoint = 799,
CarrionSwarm = 800,
FlyCarrionSwarm = 801,
WheelLoop = 802,
FlyWheelLoop = 803,
StandCharacterCreate = 804,
FlyStandCharacterCreate = 805,
MountChopper = 806,
FlyMountChopper = 807,
FacePose = 808,
FlyFacePose = 809,
Placeholder00 = 810,
FlyPlaceholder00 = 811,
Placeholder01 = 812,
FlyPlaceholder01 = 813,
Placeholder02 = 814,
FlyPlaceholder02 = 815,
Placeholder03 = 816,
FlyPlaceholder03 = 817,
Placeholder04 = 818,
FlyPlaceholder04 = 819,
Placeholder05 = 820,
FlyPlaceholder05 = 821,
Placeholder06 = 822,
FlyPlaceholder06 = 823,
Placeholder07 = 824,
FlyPlaceholder07 = 825,
Placeholder08 = 826,
FlyPlaceholder08 = 827,
Placeholder09 = 828,
FlyPlaceholder09 = 829,
Placeholder10 = 830,
FlyPlaceholder10 = 831,
Placeholder11 = 832,
FlyPlaceholder11 = 833,
Placeholder12 = 834,
FlyPlaceholder12 = 835,
ReadyCrossbow = 836,
FlyReadyCrossbow = 837,
LoadCrossbow = 838,
FlyLoadCrossbow = 839,
AttackCrossbow = 840,
FlyAttackCrossbow = 841,
HoldCrossbow = 842,
FlyHoldCrossbow = 843,

} E_ANIMATIONS;


typedef enum <uchar>{
	Normal =0,
	Quads,
	Deeprun
}PARTICLE_TYPE;

typedef enum <uchar>{
	Plane=1,
	Sphere,
	Spline_not_used
}EMITTER_TYPE;

typedef enum <uint16>{
	Directional =0,
	Point
}LIGHT_TYPE;

typedef enum <uint32>{
	Mountpoint_or_LeftWrist =0,
	HandRight,
	HandLeft,
	ElbowRight,
	ElbowLeft,
	ShoulderRight,
	ShoulderLeft,
	KneeRight,
	KneeLeft,
	HipRight,
	HipLeft,
	Helm,
	Back,
	ShoulderFlapRight,
	ShoulderFLapLeft,
	ChestBloodFront,
	ChestBloodBack,
	Breath,
	PlayerName,
	Base,
	Head,
	SpellLeftHand,
	SpellRightHand,
	Special1,
	Special2,
	Special3,
	SheathMainHand,
	SheathOffHand,
	SheathShield,
	PlayerNameMounted,
	LargeWeaponLeft,
	LargeWeaponRight,
	HopWeaponleft,
	HipWeaponRight,
	Chest,
	HandArrow,
	Bullet,
	SpellHandOmni,
	SpellHandDirected,
	Vehicle_Seat1,
	Vehicle_Seat2,
	Vehicle_Seat3,
	Vehicle_Seat4,
	Vehicle_Seat5,
	Vehicle_Seat6,
	Vehicle_Seat7,
	Vehicle_Seat8,
	LeftFoot, 
  RightFoot,
  ShieldNoGlove,
SpineLow,
AlteredShoulderR,
AlteredShoulderL,
BeltBuckle,
SheathCrossbow,
}ATTACHMENT_ID;

// colors for special puposes
local int cOffset = cLtYellow;
local int cFileName = cLtAqua;
local int cVector = cLtPurple;

// filename - ... because 010 want it so
//--------------------------------------------------
typedef struct {
    SetColor( cBlack, cFileName );
   
    string value;

    SetStdColor();
} filename <read=filenameRead>;
    
    string filenameRead(filename &f) {
        return f.value;
    };

//substructure for timestamps yay
typedef struct
{
	uint32_t nValues;
	uint32_t ofsValues<format=hex>;
	local int oldpos=FTell();
	FSeek(ofsValues);
	uint32_t timestamp[nValues];
	FSeek(oldpos);
}SubAnimBlock_T<read=showSubAnimBlock_T>;

string showSubAnimBlock_T(SubAnimBlock_T& x)
{
  string r;
  SPrintf (r, "%i", x.nValues);
  return r;
}

typedef struct
{
	int32 nValues;
	int32 ofsValues<format=hex>;
}SubAnimBlock;

typedef struct 
{
	local int oldpos;
	local int i;
	InterpolationType interpolation;
	int16	GlobalSequenceID;
	uint32	numberOfTimestampPairs;
	uint32	offsetToTimestampPairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToTimestampPairs);
	i=0;
	while(i<numberOfTimestampPairs){
		SubAnimBlock_T substruct;
		i++;
	}
	FSeek(oldpos);
	}Timestamps;
	uint32	numberOfKeyFramePairs;
	uint32	offsetToKeyFramePairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToKeyFramePairs);
	i=0;
	while(i<numberOfKeyFramePairs){
		SubAnimBlock substruct;
		i++;
	}
	FSeek(oldpos);
	}Values;
} ABlock;

//AnimBlocks for Float[3] and Short[4]

typedef struct{
	C3Vector val[3];
}BigFloat;

typedef struct
{
	short val[4];
}ShortVec4;

typedef struct
{
	int32 nValues;
	int32 ofsValues<format=hex>;
	local int oldpos=FTell();
	FSeek(ofsValues);
	local int i=0;
	while(i<nValues){
		C3Vector anim;
		i++;
	}
	FSeek(oldpos);
}SubAnimBlock_F;

typedef struct
{
	int32 nValues;
	int32 ofsValues<format=hex>;
	local int oldpos=FTell();
	FSeek(ofsValues);
	local int i=0;
	while(i<nValues){
		BigFloat anim;
		i++;
	}
	FSeek(oldpos);
}SubAnimBlock_BF;

typedef struct 
{
	local int oldpos;
	local int i;
	InterpolationType interpolation;
	int16	GlobalSequenceID;
	uint32	numberOfTimestampPairs;
	uint32	offsetToTimestampPairs<format=hex>;
	oldpos=FTell();
	FSeek(offsetToTimestampPairs);
	SubAnimBlock_T timestamps[numberOfTimestampPairs];
	FSeek(oldpos);
	uint32	numberOfKeyFramePairs;
	uint32	offsetToKeyFramePairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToKeyFramePairs);
	i=0;
	while(i<numberOfKeyFramePairs){
		SubAnimBlock_F substruct;
		i++;
	}
	FSeek(oldpos);
	}Values;
} ABlock_F;

typedef struct 
{
	local int oldpos;
	local int i;
	InterpolationType interpolation;
	int16	GlobalSequenceID;
	uint32	numberOfTimestampPairs;
	uint32	offsetToTimestampPairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToTimestampPairs);
	i=0;
	while(i<numberOfTimestampPairs){
		SubAnimBlock_T substruct;
		i++;
	}
	FSeek(oldpos);
	}Timestamps;
	uint32	numberOfKeyFramePairs;
	uint32	offsetToKeyFramePairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToKeyFramePairs);
	i=0;
	while(i<numberOfKeyFramePairs){
		SubAnimBlock_BF substruct;
		i++;
	}
	FSeek(oldpos);
	}Values;
} ABlock_BF;


typedef struct
{
	int32 nValues;
	int32 ofsValues<format=hex>;
	local int oldpos=FTell();
	FSeek(ofsValues);
	local int i=0;
	while(i<nValues){
		float value;
		i++;
	}
	FSeek(oldpos);
}SubAnimBlock_f;

typedef struct 
{
	local int oldpos;
	local int i;
	InterpolationType interpolation;
	int16	GlobalSequenceID;
	uint32	numberOfTimestampPairs;
	uint32	offsetToTimestampPairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToTimestampPairs);
	i=0;
	while(i<numberOfTimestampPairs){
		SubAnimBlock_T substruct;
		i++;
	}
	FSeek(oldpos);
	}Timestamps;
	uint32	numberOfKeyFramePairs;
	uint32	offsetToKeyFramePairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToKeyFramePairs);
	 i=0;
	while(i<numberOfKeyFramePairs){
		SubAnimBlock_f substruct;
		i++;
	}
	FSeek(oldpos);
	}Values;
} ABlock_f;

typedef struct
{
	int32 nValues;
	int32 ofsValues<format=hex>;
	local int oldpos=FTell();
	FSeek(ofsValues);
	local int i=0;
	while(i<nValues){
		int value;
		i++;
	}
	FSeek(oldpos);
}SubAnimBlock_i;

typedef struct 
{
	local int oldpos;
	local int i;
	InterpolationType interpolation;
	int16	GlobalSequenceID;
	uint32	numberOfTimestampPairs;
	uint32	offsetToTimestampPairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToTimestampPairs);
	i=0;
	while(i<numberOfTimestampPairs){
		SubAnimBlock_T substruct;
		i++;
	}
	FSeek(oldpos);
	}Timestamps;
	uint32	numberOfKeyFramePairs;
	uint32	offsetToKeyFramePairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToKeyFramePairs);
	i=0;
	while(i<numberOfKeyFramePairs){
		SubAnimBlock_i substruct;
		i++;
	}
	FSeek(oldpos);
	}Values;
} ABlock_i;

typedef struct
{
	int32 nValues;
	int32 ofsValues<format=hex>;
	local int oldpos=FTell();
	FSeek(ofsValues);
	local int i=0;
	while(i<nValues){
		byte value;
		i++;
	}
	FSeek(oldpos);
}SubAnimBlock_b;

typedef struct 
{
	local int oldpos;
	local int i;
	InterpolationType interpolation;
	int16	GlobalSequenceID;
	uint32	numberOfTimestampPairs;
	uint32	offsetToTimestampPairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToTimestampPairs);
	i=0;
	while(i<numberOfTimestampPairs){
		SubAnimBlock_T substruct;
		i++;
	}
	FSeek(oldpos);
	}Timestamps;
	uint32	numberOfKeyFramePairs;
	uint32	offsetToKeyFramePairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToKeyFramePairs);
	i=0;
	while(i<numberOfKeyFramePairs){
		SubAnimBlock_b substruct;
		i++;
	}
	FSeek(oldpos);
	}Values;
} ABlock_b;

typedef struct
{
	int32 nValues;
	int32 ofsValues<format=hex>;
	local int oldpos=FTell();
	FSeek(ofsValues);
	local int i=0;
	while(i<nValues){
		ShortVec4 anim;
		i++;
	}
	FSeek(oldpos);
}SubAnimBlock_S;

typedef struct 
{
	local int oldpos;
	local int i;
	InterpolationType interpolation;
	int16	GlobalSequenceID;
	uint32	numberOfTimestampPairs;
	uint32	offsetToTimestampPairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToTimestampPairs);
	i=0;
	while(i<numberOfTimestampPairs){
		SubAnimBlock_T substruct;
		i++;
	}
	FSeek(oldpos);
	}Timestamps;
	uint32	numberOfKeyFramePairs;
	uint32	offsetToKeyFramePairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToKeyFramePairs);
	i=0;
	while(i<numberOfKeyFramePairs){
		SubAnimBlock_S substruct;
		i++;
	}
	FSeek(oldpos);
	}Values;
} ABlock_S;


typedef struct
{
	int32 nValues;
	int32 ofsValues<format=hex>;
	local int oldpos=FTell();
	FSeek(ofsValues);
	local int i=0;
	while(i<nValues){
		uint16 anim;
		i++;
	}
	FSeek(oldpos);
}SubAnimBlock_s;

typedef struct 
{
	local int oldpos;
	local int i;
	InterpolationType interpolation;
	int16	GlobalSequenceID;
	uint32	numberOfTimestampPairs;
	uint32	offsetToTimestampPairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToTimestampPairs);
	i=0;
	while(i<numberOfTimestampPairs){
		SubAnimBlock_T substruct;
		i++;
	}
	FSeek(oldpos);
	}Timestamps;
	uint32	numberOfKeyFramePairs;
	uint32	offsetToKeyFramePairs<format=hex>;
	struct{
	oldpos=FTell();
	FSeek(offsetToKeyFramePairs);
	i=0;
	while(i<numberOfKeyFramePairs){
		SubAnimBlock_s substruct;
		i++;
	}
	FSeek(oldpos);
	}Values;
} ABlock_s;


typedef struct{
	InterpolationType interpolation;
	int16_t	GlobalSequenceID;
	uint32_t	numberOfTimestampPairs;
	uint32_t	offsetToTimestampPairs<format=hex>;

	local int oldpos = FTell();
	FSeek(offsetToTimestampPairs);
	SubAnimBlock_T timestamps[numberOfTimestampPairs];
	FSeek(oldpos); 

}ABlock_Events<optimize=false>;


typedef struct 
{
	char	Identifier[4];// 	 Some kind of ID, starts with '$'. Some identifiers below.
	uint32_t	Data; //	 This data is passed when the event is fired. 
	uint32_t	Bone;// 	Somewhere it has to be attached.
	C3Vector	Position;// 	Relative to that bone of course.
	ABlock_Events timer<optimize=false>;
} sEvents<read=ReadEvent>;

string ReadEvent( sEvents &a) {
    string s; SPrintf( s, "%c%c%c%c", a.Identifier[0], a.Identifier[1], a.Identifier[2], a.Identifier[3] ); 
   return s;
}

typedef struct 
{
	ATTACHMENT_ID Id;//  	 Just an id. Is referenced in the lookup-block below too.
	uint32 	Bone;//  	Somewhere it has to be attached.
	C3Vector Position;//  	Relative to that bone of course.
	ABlock_i 	Data;// 	Its an integer in the data. It has been 1 on all models I saw. Whatever. 
} sAttachments<read=ReadAttachment>;

string ReadAttachment( sAttachments &a) {
    string s; SPrintf( s, "%s", EnumToString(a.Id) ); 
   return s;
}

struct M2Vertex
{
  C3Vector pos;
  unsigned char bone_weights[4];
  unsigned char bone_indices[4];
  C3Vector normal;
  C2Vector tex_coords[2];  // two textures, depending on shader used
};

typedef struct
{
	LIGHT_TYPE type;
	uint16 bone;
	float Postion[3];
	ABlock_F ambientcolor;
	ABlock_f ambientintensity;
	ABlock_F diffusecolor;
	ABlock_f diffuseambient;
	ABlock_f attenuationstart;
	ABlock_f attenuationend;
	ABlock_i unk1;
} Lights;

typedef struct 
{
  E_ANIMATIONS animation_id;         // Animation id in AnimationData.dbc
  uint16_t sub_animation_id;     // Sub-animation id: Which number in a row of animations this one is. 
  uint32_t length;               // The length (timestamps) of the animation. I believe this actually the length of the animation in milliseconds.
  float moving_speed;            // This is the speed the character moves with in this animation.
  uint32_t flags;                // See below.
  int16_t probability;           // This is used to determine how often the animation is played. For all animations of the same type, this adds up to 0x7FFF (32767).
  uint16_t _padding;
  uint32_t _unknown[2];          //  These two are connected. Most of the time, they are 0. But if there is data in one, there is data in both of them.
  uint32_t blend_time;           // The client blends (lerp) animation states between animations where the end and start values differ. This specifies how long that blending takes. Values: 0, 50, 100, 150, 200, 250, 300, 350, 500. 
  CAaBox bounds;
  float bound_radius;
  int16_t next_animation;        // id of the following animation of this AnimationID, points to an Index or is -1 if none.
  uint16_t aliasNext;            // id in the list of animations. Used to find actual animation if this sequence is an alias (flags & 0x40)
} M2Sequence<read=ReadAnimation>;


	string ReadAnimation( M2Sequence &a) {
    if(a.next_animation==-1) {
        string s; SPrintf( s, "[%i]: %s",a.length,EnumToString( a.animation_id) ); 
    } else {
        string s; SPrintf( s, "[%i]: %s, > %i",a.length,EnumToString( a.animation_id), a.next_animation ); 
    }
    return s;
}

typedef struct 
{
	int32	KeyBoneID;
	E_BONESFLAGS flags;
	int16	ParentBone;
	uint16	unk[3];
	ABlock_F Translation;
	ABlock_S Rotation;
	ABlock_F Scaling;
	C3Vector pivot;
} Bone;

typedef struct
{
    E_TEXTURETYPES type;
    E_TEXTUREFLAGS flags;
	uint32 FileName_length;
	uint32 FileName_offset;
	local int oldpos=FTell();
	FSeek(FileName_offset);
	filename texture;
	FSeek(oldpos);
}Texture<read=readTexture>;
    string readTexture(Texture &o) {
		if(o.type==0){
			string s;
			SPrintf(s,"Hardcoded: %s",o.texture.value);
        return s;
		}
		else{
		return EnumToString(o.type);
		}
    }
	
typedef struct {
	local int oldpos;
	local int i;
	uint32	numberOfTimestampPairs;
	uint32	offsetToTimestampPairs;
	struct{
	oldpos=FTell();
	FSeek(offsetToTimestampPairs);
	i=0;
	while(i<numberOfTimestampPairs){
		short timestamp;
		i++;
	}
	FSeek(oldpos);
	}Timestamps;
	uint32	numberOfKeyFramePairs;
	uint32	offsetToKeyFramePairs;
	struct{
	oldpos=FTell();
	FSeek(offsetToKeyFramePairs);
	i=0;
	while(i<numberOfKeyFramePairs){
		short data;
		i++;
	}
	FSeek(oldpos);
	}Values;
}FakeABlock_s;

typedef struct {
	local int oldpos;
	local int i;
	uint32	numberOfTimestampPairs;
	uint32	offsetToTimestampPairs;
	struct{
	oldpos=FTell();
	FSeek(offsetToTimestampPairs);
	i=0;
	while(i<numberOfTimestampPairs){
		short timestamp;
		i++;
	}
	FSeek(oldpos);
	}Timestamps;
	uint32	numberOfKeyFramePairs;
	uint32	offsetToKeyFramePairs;
	struct{
	oldpos=FTell();
	FSeek(offsetToKeyFramePairs);
	i=0;
	while(i<numberOfKeyFramePairs){
		C3Vector data;
		i++;
	}
	FSeek(oldpos);
	}Values;
}FakeABlock_F;

typedef struct {
	local int oldpos;
	local int i;
	uint32	numberOfTimestampPairs;
	uint32	offsetToTimestampPairs;
	struct{
	oldpos=FTell();
	FSeek(offsetToTimestampPairs);
	i=0;
	while(i<numberOfTimestampPairs){
		short timestamp;
		i++;
	}
	FSeek(oldpos);
	}Timestamps;
	uint32	numberOfKeyFramePairs;
	uint32	offsetToKeyFramePairs;
	struct{
	oldpos=FTell();
	FSeek(offsetToKeyFramePairs);
	i=0;
	while(i<numberOfKeyFramePairs){
		C2Vector data;
		i++;
	}
	FSeek(oldpos);
	}Values;
}FakeABlock_ff;

struct M2Array_T
{
  int count;
  uint offset;
};

struct M2Array_char
{
  M2Array_T _;
};

struct M2PartTrack
{
  int field_0;
  int field_4;
  int field_8;
  int field_C;
};
struct M2Track
{
  char _[0x14];
};
struct CRange
{
  float min;
  float max;
};
typedef struct 
{
  uint8_t decimal : 5;
  uint8_t integer : 2;
  uint8_t sign : 1;
}fixed_2_5<read=readfixed_2_5>;

string readfixed_2_5 (fixed_2_5& f)
{
  string a;
  if (f.sign) SPrintf (a, "%s-", a);

  float v = f.decimal / 32.f * 1000.f;
  while ((v/10.f) > 1.0f && (float)(int)v == v)
  {
    v = v / 10.f;
  }
  SPrintf (a, "%s%i.%i", a, f.integer, v);
  return a;
}

struct M2ParticleOld
{
  int field_0;
  uint flags;
  C3Vector position;
  int16_t bone;
  int16_t texture0 : 5;
  int16_t texture1 : 5;
  int16_t texture2 : 5;
  int16_t : 1;
  M2Array_char modelfilename;
  M2Array_char particle_filename;
  char blendingType;
  char generator;
  int16_t particlecolor_column_id;
  fixed_2_5 field_2C[2];
  int16_t field_2E;
  int16_t texture_dimensions_rows;
  int16_t texture_dimensions_columns;
  M2Track EmissionSpeed;
  M2Track SpeedVariation;
  M2Track VerticalRange;
  M2Track HorizontalRange;
  M2Track Gravity;
  M2Track Lifespan;
  float field_AC;
  M2Track EmissionRate;
  float field_C4;
  M2Track EmissionAreaLength;
  M2Track EmissionAreaWidth;
  M2Track Gravity2;
  M2PartTrack colorTrack;
  M2PartTrack alphaTrack;
  M2PartTrack scaleTrack;
  float field_134;
  float field_138;
  M2PartTrack headCellTrack;
  M2PartTrack tailCellTrack;
  float field_15C;
  float field_160;
  float field_164;
  CRange twinkleScaleRange;
  float field_170;
  float field_174;
  int field_178;
  float field_17C;
  float field_180;
  float field_184;
  float field_188;
  C3Vector model_1_rotation;
  C3Vector model_2_rotation;
  C3Vector model_translation;
  float field_1B0;
  float field_1B4;
  float field_1B8;
  float field_1BC;
  M2Array_T field_1C0;
  M2Track enabled_in;
};

typedef struct 
{
  uint16_t decimal : 9;
  uint16_t integer : 6;
  uint16_t sign : 1;
}fixed_7_9<read=readfixed_7_9>;

string readfixed_7_9 (fixed_7_9& f)
{
  string a;
  if (f.sign) SPrintf (a, "%s-", a);

  float v = f.decimal / 512.f * 1000.f;
  while ((v/10.f) > 1.0f && (float)(int)v == v)
  {
    v = v / 10.f;
  }
  SPrintf (a, "%s%i.%i", a, f.integer, v);
  return a;
}

typedef struct 
{
  fixed_7_9 x;
  fixed_7_9 y;
}_2fixed_7_9Vector<read=read2fixed_7_9Vector>;
string read2fixed_7_9Vector (_2fixed_7_9Vector& f)
{
  string a;
  SPrintf (a, "{%s, %s}", readfixed_7_9 (f.x), readfixed_7_9 (f.y));
  return a;
}


struct M2Particle
{
  M2ParticleOld _;
  _2fixed_7_9Vector MultiTexParam0[2];
  _2fixed_7_9Vector MultiTexParam1[2];
};


typedef struct {
    int32 id;
	int16 flags;
	int16 flags2;
	C3Vector pos;
	int16 bone;
	int16 texture;
	int32 FileName1_length;
	int32 FileName1_offset<format=hex>;
	struct{
	local int oldpos=FTell();
	FSeek(FileName1_offset);
	filename texture;
	FSeek(oldpos);
	}VModelFileName1;

	int32 FileName2_length;
	int32 FileName2_offset<format=hex>;
	struct{
	local int oldpos=FTell();
	FSeek(FileName2_offset);
	filename texture;
	FSeek(oldpos);
	}VModelFileName2;
	char blend;
    EMITTER_TYPE Emitter_type;
	uint16 particle_color_Replaceable;
	PARTICLE_TYPE Particly_type;
    E_HEAD_OR_TAIL Head_or_Tail;
	int16 Texturerot;
	int16 rows;
	int16 cols;
    ABlock_f emissionspeed;
    ABlock_f Speed_var;
    ABlock_f Vertical_range;
    ABlock_f Horizontal_range;
    ABlock_f Gravity;
    ABlock_f Lifespan;
    int paddingoO;
    ABlock_f Emissionrate;
    int paddingoO2;
    ABlock_f Emissionarea_length;
    ABlock_f Emissionarea_width;
    ABlock_f Gravity_strong;
    FakeABlock_F Color;
	FakeABlock_s Opacity;
	FakeABlock_ff Scale;
	int32 unk[2];
	FakeABlock_s Intensity;
	FakeABlock_s UnknownFB2;
	C3Vector unk;
	C3Vector scale;
	float slowdown;
    float unkfloats1[2];
	float rotation;	//Sprite Rotation
    float unkfloats2[2];
	C3Vector Rot1;	//Model Rotation 1
	C3Vector Rot2;	//Model Rotation 2
	C3Vector Trans;	//Model Translation
	float f2[6];
	ABlock_b en;
} Particles <optimize=false>;

typedef struct {
	int32 id;
	int32 bone;
	C3Vector pos;
	int32 nTextures;
	int32 ofsTextures <format=hex>;
	struct{
	local int oldpos=FTell();
	FSeek(ofsTextures);
	local int i=0;
	while(i<nTextures){
		int data;
		i++;
	}
	FSeek(oldpos);
	}VTextures;
	int32 nBlend;
	int32 ofsBlend <format=hex>;
	struct{
	local int oldpos=FTell();
	FSeek(ofsBlend);
	local int i=0;
	while(i<nBlend){
		int data;
		i++;
	}
	FSeek(oldpos);
	}VBlend;
	ABlock_F color;
	ABlock_s opacity;
	ABlock_f above;
	ABlock_f below;
	float res, length, unk;
	int16 s1, s2;
	ABlock_s unk1;
	ABlock_b enabled;
	uint32 padding;
} Ribbons;

typedef struct{
	ABlock_F Color;
	ABlock_f Alpha;
}Colors;

typedef struct{
	ABlock_F Translation;
	ABlock_S Rotation;
	ABlock_F Scaling;
}Texture_Animations;

typedef struct{
    short index[3];
}BoundingTriangle;

typedef struct{
    float coord[3];
}BoundingVertex;

typedef struct{
    float coord[3];
}BoundingNormal;

typedef struct{
	E_CAMERATYPE Id;
	float FarClipping;
	float NearClipping;
	ABlock_BF TranslationPos;
	C3Vector position;
	ABlock_BF TranslationTar;
	C3Vector target;
	ABlock_F RollEffect;
	ABlock_F fov;
}Cameras<read=ReadCam>;

string ReadCam(Cameras &c){
		return EnumToString(c.Id);
}
	
	
typedef struct{
	E_RENDERFLAGS flag;
	E_RENDERMODES blendingmode;
}RenderFlags;



enum typeId
{
  m2sequence,
};
void mk_type_array (typeId typeid, int count)
{
  switch (typeid)
  {
  case m2sequence:
    M2Sequence _[count];
    break;
  }
}

typedef struct (int typeid)
{
  uint32_t num;
  uint32_t offset;
  local int pos = FTell();
  FSeek (offset);
  mk_type_array (typeid, num);
  FSeek (pos);
} M2Array; 

struct {
uint32_t magic;
if (magic == 825377869) FSeek (12);
uint Version;
uint lName;
uint ofsName;
E_GLOBALFLAGS type;
uint nGlobalSequences;
uint ofsGlobalSequences<format=hex>;
M2Array animations (m2sequence);
uint nAnimationLookup;
uint ofsAnimationLookup<format=hex>;
uint nBones;
uint ofsBones<format=hex>;
uint nKeyBoneLookup;
uint ofsKeyBoneLookup<format=hex>;
uint nVertices;
uint ofsVertices<format=hex>;
uint nViews;
uint nColors;
uint ofsColors<format=hex>;
uint nTextures;
uint ofsTextures<format=hex>;
uint nTransparency;
uint ofsTransparency<format=hex>;
uint nTextureanimations;
uint ofsTextureanimations<format=hex>;
uint nTexReplace;
uint ofsTexReplace<format=hex>;
uint nRenderFlags;
uint ofsRenderFlags<format=hex>;
uint nBoneLookupTable;
uint ofsBoneLookupTable<format=hex>;
uint nTexLookup;
uint ofsTexLookup<format=hex>;
uint nTexUnits;
uint ofsTexUnits<format=hex>;
uint nTransLookup;
uint ofsTransLookup<format=hex>;
uint nTexAnimLookup;
uint ofsTexAnimLookup<format=hex>;
	CAaBox BoundingVolume;
	float	BoundingRadius;
	CAaBox CollisionVolume;
	float	CollisionRadius;
uint nBoundingTriangles;
uint ofsBoundingTriangles<format=hex>;
uint nBoundingVertices;
uint ofsBoundingVertices<format=hex>;
uint nBoundingNormals;
uint ofsBoundingNormals<format=hex>;
uint nAttachments;
uint ofsAttachments<format=hex>;
uint nAttachLookup;
uint ofsAttachLookup<format=hex>;
uint nEvents;
uint ofsEvents<format=hex>;
uint nLights;
uint ofsLights<format=hex>;
uint nCameras;
uint ofsCameras<format=hex>;
uint nCameraLookup;
uint ofsCameraLookup<format=hex>;
uint nRibbonEmitters;
uint ofsRibbonEmitters<format=hex>;
uint nParticleEmitters;
uint ofsParticleEmitters<format=hex>;

if(type&8)
struct{
	uint nAltMapping;
	uint ofsAltMapping;
	FSeek(ofsAltMapping);
	uint16 _AltMapping[nAltMapping];
}new_mapping;

FSeek(ofsGlobalSequences);
uint32 _globaseq[nGlobalSequences];

FSeek(ofsName);
filename _ModelName;

FSeek(ofsAnimationLookup);
int16 _AnimationLookup[nAnimationLookup];
if(ofsBones!=0){
FSeek(ofsBones);
struct
{
	local int n=0;
	while(n<nBones){
	Bone _Bones;
	n++;
	}
}Bones;
}
FSeek(ofsKeyBoneLookup);
int16 _KeyBoneLookup[nKeyBoneLookup];
FSeek(ofsBoneLookupTable);
int16 _BoneLookupTable[nBoneLookupTable];


FSeek(ofsVertices);
M2Vertex _Vertices[nVertices];
if(ofsColors!=0){
FSeek(ofsColors);
struct{
local int n=0;
while(n<nColors){
Colors _Color;
n++;
}
}Color;
}
if(ofsTextures!=0){
FSeek(ofsTextures);
struct{
local int n=0;
while(n<nTextures){
Texture _Texture;
n++;
}
}Textures;
}
if(ofsTransparency!=0){
FSeek(ofsTransparency);
struct{
local int n=0;
while(n<nTransparency){
ABlock_s _Transparency;
n++;
}
}Transparency;
}
if(ofsTextureanimations!=0){
FSeek(ofsTextureanimations);
struct{
local int n=0;
while(n<nTextureanimations){
Texture_Animations _TexAnim;
n++;
}
}TextureAnimation;
}
FSeek(ofsTexReplace);
int16 _TexReplace[nTexReplace];
FSeek(ofsRenderFlags);
RenderFlags _RenderFlags[nRenderFlags];

FSeek(ofsTexLookup);
int16 _TexLookupTable[nTexLookup];
FSeek(ofsTexUnits);
int16 _TexUnitLookupTable[nTexUnits];
FSeek(ofsTransLookup);
int16 _TransLookupTable[nTransLookup];
FSeek(ofsTexAnimLookup);
int16 _TexAnimLookup[nTexAnimLookup];


/*Missing BoundingVolumes!!!
	*/

if(ofsAttachments!=0){
FSeek(ofsAttachments);
struct{
local int n=0;
while(n<nAttachments){
sAttachments _Attachment;
n++;
}
}Attachments;
}
FSeek(ofsAttachLookup);
int16 _AttachLookup[nAttachLookup];
FSeek(ofsEvents);
sEvents _Events[nEvents]<optimize=false>;

FSeek(ofsBoundingTriangles);
BoundingTriangle _BoundingTriangles[nBoundingTriangles];
FSeek(ofsBoundingVertices);
BoundingVertex _BoundingVertices[nBoundingVertices];
FSeek(ofsBoundingNormals);
BoundingNormal _BoundingNormals[nBoundingNormals];

if(ofsLights!=0){
FSeek(ofsLights);
struct{
local int n=0;
while(n<nLights){
Lights _Light;
n++;
}
}Light;
}

if(ofsCameras!=0){
FSeek(ofsCameras);
struct{
local int n=0;
while(n<nCameras){
Cameras _Camera;
n++;
}
}Camera;
}
FSeek(ofsCameraLookup);
int16 _CamLookupTable[nCameraLookup];


if(ofsRibbonEmitters!=0){
FSeek(ofsRibbonEmitters);
struct{
local int n=0;
while(n<nRibbonEmitters){
Ribbons _Ribbon;
n++;
}
}Ribbon;
}

FSeek (ofsParticleEmitters);
M2Particle particles[nParticleEmitters];

}M2_file;

/*******************************************************
 *  4. Helpers
*******************************************************/
    
    // im soo lazy
void SetStdColor() {
    SetColor( cBlack, cWhite );
}
